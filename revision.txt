git clone <url>
to copy git code in your folder 
--------------------------------------------------------------------
✅hardhat setup
 
 ✅yarn add  --dev hardhat
 ✅yarn hardhat
 ✅then setup your project
 ✅ install all dependecy
 -----------------------------------------------------------------
 {
    push 1fm
 }
 ✅Write your contract
 ✅check solidity version in hardhat config.js
 ✅run yarn hardhat compile
 it show you some error of library if not present then install them from npm
 
 ✅yarn add --dev @chainlink/contracts
✅compile your code
-------------------------------------------------------------------
deployment :-
✅now we don't deploy manually we use plugin
✅yarn add --dev hardhat-deploy
✅add require("hardhat-deploy") in config.js

✅mkdir deploy
✅this is our deploy folder where hardhat module look for code that deploy our contract

✅now we use ether to deploy our code so we need to install hardhat-deploy-ethers
which add extra feature to deploy our contract
✅yarn add --dev   @nomiclabs/hardhat-ethers@npm:hardhat-deploy-ethers ethers
✅Which means you then need to do require("@nomiclabs/hardhat-ethers") instead of require("hardhat-deploy-ethers") in your hardhat.config.js file.




✅so now when we use yarn hardhat deploy all the code sequencly  present in deploy directory deploy

✅we creat 01-deploy-fund-me.js in deploy folder and starting writing code in it

✅hre is harhat hat run time environment and when we run deploy script hardhat automatically calls this function and just passes the hardhat object in it 
{similar to {ethers,run, networks} = requie("hardhat") come's into our contract from harhat, }.
✅now instead of hardhat it come from hre basically i.e, the same thing.


✅add this in config.js
{{
 ✅namedAccounts: {
    deployer:{
      default:0,
    },
    user :{
      default: 1,
    }
  }
}}


✅and out 01-deploy-fund-me.js look like this:-
const { network } = require("hardhat");
module.exports = async ({getNamedAccounts, deployments}) => {
    const {deploy} = deployments;
    const {deployer} = await getNamedAccounts();
    const childId = network.config.chainId;
  };



✅now if we want to change price in dollar we can do it on goerli beacause of chinlink price feed addresses but what we do in case of localhost.
✅we can do it by using mocking.


{{{{{{{{{{{{{
    here we pass chain link price feed address from constructor to the second contract
    i.e, i update the contract but not need to be 
}}}}}}}}}}}}}}


✅So now we refector our contract and pass pricefeed in constructor according the network that we are on  


✅now instead of contractfactory we use deploy function to deploy our code
✅so instead of using direct address in our funtion we take the help of chailid and assign different different address for different chainId

✅make file in root by name of helper-hardhat-config.js
✅ and make a structure like differnt chainid assign differen eth to USD price address 


============
push {
    2fm
}
===========

✅we create different contract for testing on localhost because it doesnot have eth to usd price feed address.

✅this contract only for local host
so mkdir in contracts by the name of test
insite it create file MockV3AggregatorV3.sol

✅for mock address go to below address and copy
https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.6/tests/MockV3Aggregator.sol

✅instead of it we can take help of npm and write one line

✅// SPDX-License-Identifier: MIT
pragma solidity^0.6.0;
import "@chainlink/contracts/src/v0.6/tests/MockV3Aggregator.sol";

✅both are the same thing

----------------------------------------------
✅now to tackel differnet -differnt version on solidity
✅we can add differnt version inside config.js

  solidity: {
    compilers :[{version:"0.8.8"},{version:"0.6.6"}],
  },
  run compile command
  -----------------------------------------------
  push{
    "3fm"
  }

now complete the 00-deploy-mocks.js
======================================================
we add tage so we can decide which contract we want to compile or deploy 
module.exports.tags = ["all", "mocks"]
use command yarn hardhat deploy --tags <tag name>
on place of includes chainid we can also able to use include natwrok.name

=================================================

finally deploy using yarn hardhat deploy
==============================================================
so now whenever we run yarn hardhat node
our code automatically deploy to local node
==============================================================

mkdir utils 
mkfile verify.js in it

add this in verify.js
{{{{{{{{{{{{{{{{{{
    const {run} = require('hardhat');
const verify = async (contractAddress, args) => {
  console.log("Verifying contract...")
  try {
    await run("verify:verify", {
      address: contractAddress,
      constructorArguments: args,
    })
  } catch (e) {
    if (e.message.toLowerCase().includes("already verified")) {
      console.log("Already Verified!")
    } else {
      console.log(e)
    }
  }
}

module.exports = {verify}
}}}}}}}}}}}}}}}}}}
--------------------------------------------------------------------------------------
Now we can able to deploy out contract on any network by just changing the hardhat config and  helper hardhat config.js
just use command for deployment

push{
    4fm
}
====================================================================================================
            learn about solidity style guide
1 pragma 
2 imports
3 error code
4 Inteface
5 library
6 contract 
----------------------
Use netspack
/** @title Fund Me
 * @author Ankit
 * @notice 
 */
----------------------
Type declaration
state variable
event
modidfier
function

======================================================================
push{
    5fm
}

============================
delete present all file from test  folder
and create folder by the name of staging and units in test folder

in unit test we do all test locally 
local test can be done variable:- 
=>local hardhat
=>forked hardhat

but incase of staging it is last test on testnet before deploying on main net

use yarn hardhat console to see which file is not included inside the test

====================================================================================================
11.08  full  se do testing again.

 you can use console log in your solidity to debugg your code.
 you just need to do 
 import "hardhat/console.log"
 can then you can use console log in solidity


 ===================================
 FOR GAS information use this command
  gasReporter:{
  enabled: true,
  outputFile: "gas-report.txt",
  noColors: true,
  currency: "USD",
  // coinmarketcap: COIN_MARKET_API_KEY,
  //// token : use for other network 
// sign up https://pro.coinmarketcap.com/account/
// to get api to convert gas into dollar
// 1e1c69f1-3947-46cb-951f-e7d587cf22f0
}
in hardhat config
push{
  6fm
}

=========================
gas optimisation:- 
out state variable take space of 32 byte to get store
same with happen with array but it pass though ethereum hashing operation to store in that storage

but in case of constant or immutable char they do not take storage because they become part of you bytecode
they are not permanent in contract 
they store in function itself and get deleted once function is completed after running

you can reed more about this in solidity documentation

you can see gas code in opcodes
so we append to show that we are saying this is storage variable
insert s_ and i_

when we use state variable to read the data it cost lots of gas so instead of using state variable

we copy them in our local function storage and perform needed operation.

====================================
now at the end we do staging test
create Fundme.staging.test.js

run test on goerli networks
============================================

now inside scipt folder create fund.js
file where we write code to run our code on local node

push{
  end
}
